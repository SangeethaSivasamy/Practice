/**
 * 
 */
package com.subrat.Tree;

/**
 * @author sparida
 *
 */
public class SortedLinkedListToBalancedBST {

	/* head node of link list */
    static LNode head;
     
    /* Link list Node */
    class LNode 
    {
        int data;
        LNode next, prev;
 
        LNode(int d) 
        {
            data = d;
            next = prev = null;
        }
    }
     
    /* A Binary Tree Node */
    class TNode 
    {
        int data;
        TNode left, right;
 
        TNode(int d) 
        {
            data = d;
            left = right = null;
        }
    }
 
    /* This function counts the number of nodes in Linked List
       and then calls sortedListToBSTRecur() to construct BST */
    TNode sortedListToBST() 
    {
        /*Count the number of nodes in Linked List */
        int n = countNodes(head);
 
        /* Construct BST */
        return sortedListToBSTRecur(n);
    }
    /* The main function that constructs balanced BST and
    returns root of it.
    n  --> No. of nodes in the Doubly Linked List */
 TNode sortedListToBSTRecur(int n) 
 {
     /* Base Case */
     if (n <= 0) 
         return null;

     /* Recursively construct the left subtree */
     TNode left = sortedListToBSTRecur(n / 2);

     /* head_ref now refers to middle node, 
        make middle node as root of BST*/
     TNode root = new TNode(head.data);

     // Set pointer to left subtree
     root.left = left;

     /* Change head pointer of Linked List for parent 
        recursive calls */
     head = head.next;

     /* Recursively construct the right subtree and link it 
        with root. The number of nodes in right subtree  is 
        total nodes - nodes in left subtree - 1 (for root) */
     root.right = sortedListToBSTRecur(n - n / 2 - 1);

     return root;
 }

 /* UTILITY FUNCTIONS */
 /* A utility function that returns count of nodes in a 
    given Linked List */
 int countNodes(LNode head) 
 {
     int count = 0;
     LNode temp = head;
     while (temp != null)
     {
         temp = temp.next;
         count++;
     }
     return count;
 }
	
	public static void main(String[] args) {
		

	}

}
