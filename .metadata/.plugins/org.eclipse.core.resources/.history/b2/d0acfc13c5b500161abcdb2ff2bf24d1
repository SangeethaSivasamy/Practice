/**
 * 
 */
package com.subrat.Tree;

import java.util.LinkedList;
import java.util.Queue;

/**
 * @author sparida
 *
 */
public class BinaryTreeTraversal {
	
	private Tree rootNode;

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		new BinaryTreeTraversal();

	}
	
	public BinaryTreeTraversal(){
		addNode(rootNode, 45); 
		  addNode(rootNode, 25); 
		  addNode(rootNode, 75); 
		  addNode(rootNode, 15); 
		  addNode(rootNode, 35); 
		  
		  System.out.println("BFS traversal.....");
		  BFSOfTree(rootNode);
	}
	
	private void BFSOfTree(Tree rootNode) {
		if(rootNode==null){
			return;
		}
		
		Queue<Tree> queue = new LinkedList<>();
		queue.add(rootNode);
		while(!queue.isEmpty()){
			Tree temp = queue.poll();
			System.out.println(temp.getData());
			if(rootNode.getLeft()!=null){
				queue.add(rootNode.getLeft());
			}
			if(rootNode.getRight()!=null){
				queue.add(rootNode.getRight());
			}
		}
		
	}

	private void addNode(Tree rootNode, int data) {
		
		if(rootNode==null){
			Tree node = new Tree(data);
			this.rootNode=node;
		}else{
			addInProperPlace(rootNode, data);
		}
	}

	private void addInProperPlace(Tree rootNode, int data) {
		if(data>=rootNode.data){
			if(rootNode.right==null){
				Tree node = new Tree(data);
				rootNode.setRight(node);
			}else{
				addNode(rootNode.getRight(), data);
			}
		}else{
			
			if(rootNode.left==null){
				Tree node = new Tree(data);
				rootNode.setLeft(node);
			}else{
				addNode(rootNode.getLeft(), data);
				
			}
			
		}
		
	}

	private static class Tree{
		private Integer data;
		private Tree left;
		private Tree right;
		
		public Tree(Integer data){
			this.data=data;
		}

		public Integer getData() {
			return data;
		}

		public void setData(Integer data) {
			this.data = data;
		}

		public Tree getLeft() {
			return left;
		}

		public void setLeft(Tree left) {
			this.left = left;
		}

		public Tree getRight() {
			return right;
		}

		public void setRight(Tree right) {
			this.right = right;
		}

		@Override
		public String toString() {
			return "Tree [data=" + data + ", left=" + left + ", right=" + right + "]";
		}
		
	}

}
